===================================================================
Recommended Usage: ./simplecompile.sh > output.txt 2>&1
===================================================================
Sat Jan 18 19:43:25 PST 2020
Linux csslab7.uwb.edu 3.10.0-957.27.2.el7.x86_64 #1 SMP Mon Jul 29 17:46:05 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
uid=1015514(sarahyw) gid=2121015514(sarahyw) groups=2121015514(sarahyw),605559(lab-access) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
===================================================================
*** compiling with clang++ to create an executable called myprogram
===================================================================
clang version 7.0.1 (tags/RELEASE_701/final)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /opt/rh/llvm-toolset-7.0/root/usr/bin
===================================================================
*** running myprogram
Completed testAll!
Done!
===================================================================
*** running clang-tidy using options from .clang-tidy
LLVM (http://llvm.org/):
  LLVM version 7.0.1
  Optimized build.
  Default target: x86_64-unknown-linux-gnu
  Host CPU: broadwell
6639 warnings generated.
13293 warnings generated.
20255 warnings generated.
Suppressed 20255 warnings (20255 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
===================================================================
*** running clang-format format formatting suggestions
*** generating new .clang-format based on LLVM style
*** formatting suggestions for ./main.cpp
15d14
<
22d20
<
*** formatting suggestions for ./turtleprogram.cpp
153c153
<   for (int I = 0; I < Tp.getLength()-1; I++) {
---
>   for (int I = 0; I < Tp.getLength() - 1; I++) {
*** formatting suggestions for ./turtleprogramtest.cpp
107,108d106
<
<
===================================================================
*** running valgrind to detect memory leaks
==25611==     in use at exit: 0 bytes in 0 blocks
===================================================================
*** compiling with clang++ to checking for memory leaks
===================================================================
*** running myprogram with memory checking
Completed testAll!
Done!
===================================================================
*** using --analyze option for clang++ to detect issues
===================================================================
*** cleaning up, deleting myprogram
===================================================================
Sat Jan 18 19:43:38 PST 2020
===================================================================
Exiting with 0

[sarahyw@csslab7 uwb2020wi343b-turtle-sarahyw10]$ scl enable llvm-toolset-7.0 bash
[sarahyw@csslab7 uwb2020wi343b-turtle-sarahyw10]$ which clang++
/opt/rh/llvm-toolset-7.0/root/usr/bin/clang++
[sarahyw@csslab7 uwb2020wi343b-turtle-sarahyw10]$ clang++ -std=c++14 -Wall -Wextra -Wno-sign-compare *.cpp
[sarahyw@csslab7 uwb2020wi343b-turtle-sarahyw10]$ ./a.out
Completed testAll!
Done!
[sarahyw@csslab7 uwb2020wi343b-turtle-sarahyw10]$ valgrind ./a.out
==25547== Memcheck, a memory error detector
==25547== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==25547== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==25547== Command: ./a.out
==25547==
Completed testAll!
Done!
==25547==
==25547== HEAP SUMMARY:
==25547==     in use at exit: 0 bytes in 0 blocks
==25547==   total heap usage: 141 allocs, 141 frees, 42,566 bytes allocated
==25547==
==25547== All heap blocks were freed -- no leaks are possible
==25547==
==25547== For counts of detected and suppressed errors, rerun with: -v
==25547== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)

